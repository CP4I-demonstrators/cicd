apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: commit-yamls
  namespace: cp4idemonstrators
spec:
  params:
    - name: source-dir
      default: /source
    - name: app-name
      description: name of the app
    - name: sha
      description: sha of the current commit
  workspaces:
    - name: source
      description: contains the cloned git repo
  steps:
    - name: gitops
      image: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: protocol
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: host
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: repo
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: branch
              optional: true
      script: |
        #!/usr/bin/env bash
        set -e

        if [[ -z "${GIT_USERNAME}" ]]; then
          echo "Username for GitOps repo not set in secret git-credentials"
          exit 1
        fi

        if [[ -z "${GIT_PASSWORD}" ]]; then
           echo "Password for GitOps repo not set in secret git-credentials"
           exit 1
        fi

        if [[ -z "${NAMESPACE}" ]]; then
           echo "NAMESPACE is not set"
           exit 1
        fi

        if [[ -z "$(params.app-name)" ]]; then
           echo "app-name not set"
           exit 1
        fi

        if [[ -z "$(params.sha)" ]]; then
           echo "sha not set"
           exit 1
        fi

        APP_NAME="$(params.app-name)"
        SHA="$(params.sha)"

        BRANCH_CMD=""
        if [[ -n "${GIT_BRANCH}" ]]; then
          BRANCH_CMD="-b ${GIT_BRANCH}"
        fi

        PROTOCOL="${GIT_PROTOCOL}"
        if [[ -z "${PROTOCOL}" ]]; then
          PROTOCOL="https"
        fi

        # I would probably parametrize these two according to some agreed upon serviceAccount name for a particular engagement. If not present, then use defaults.
        git config --global user.email "gitops@cloudnativetoolkit.dev"
        git config --global user.name "${NAMESPACE}"


        # This is just for dev purposes, if using an organization, it would be something like: GIT_HOST/GIT_ORG/GIT_REPO
        # This is my personal repository. Hence the GIT_HOST/GIT_USERNAME/GIT_REPO format,
        # I am using the HTTPS protocol with username/password authentication (via secret injection). A better method is to mount SSH keys onto the image running this 
        # task and using the SSH protocol.

        GIT_URL="${PROTOCOL}://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_HOST}/${GIT_USERNAME}/${GIT_REPO}"
        git clone ${BRANCH_CMD} ${GIT_URL} gitops_cd
        cd gitops_cd

        cp ../source/yaml/aceIVTDeploy.yaml ./ 

        # Any file with the yaml extension in the /source directory is going to be a configuration object. And since the names are variable I use the * here.
        cp ../source/*.yaml ./ 

        if [[ $(git status -s | wc -l) -eq 0 ]]; then
          echo "No changes"
          exit 0
        fi

        
        # Git add all the yamls. This will add the Integration server yaml and any associated configurations prior to pushing to the GitOps Repository.
        git add *.yaml 
        # git add aceIVTDeploy.yaml 
        git commit -m "update ${APP_NAME} to commit ${SHA}"
        git push
